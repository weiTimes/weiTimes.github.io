<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ye Wei&#39;s blog</title>
  
  <subtitle>所见、所感、所想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weiTimes.github.io/"/>
  <updated>2017-12-14T01:57:55.512Z</updated>
  <id>https://weiTimes.github.io/</id>
  
  <author>
    <name>Ye Wei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Immutable 详解及 React 中实践</title>
    <link href="https://weiTimes.github.io/2017/08/11/Immutable%20%E8%AF%A6%E8%A7%A3%E5%8F%8A%20React%20%E4%B8%AD%E5%AE%9E%E8%B7%B5/"/>
    <id>https://weiTimes.github.io/2017/08/11/Immutable 详解及 React 中实践/</id>
    <published>2017-08-11T02:09:42.000Z</published>
    <updated>2017-12-14T01:57:55.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Immutable-详解及-React-中实践"><a href="#Immutable-详解及-React-中实践" class="headerlink" title="Immutable 详解及 React 中实践"></a>Immutable 详解及 React 中实践</h1><blockquote><p>Shared mutable state is the root of all evil（共享的可变状态是万恶之源）</p><p>– Pete Hunt</p></blockquote><p>有人说 Immutable 可以给 React 应用带来数十倍的提升，也有人说 Immutable 的引入是近期 JavaScript 中伟大的发明，因为同期 React 太火，它的光芒被掩盖了。这些至少说明 Immutable 是很有价值的，下面我们来一探究竟。<br>JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 <code>foo={a: 1}; bar=foo; bar.a=2</code> 你会发现此时 <code>foo.a</code> 也被改成了 <code>2</code> 。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费。</p><p>Immutable 可以很好地解决这些问题。<br><a id="more"></a></p><h2 id="什么是-Immutable-Data"><a href="#什么是-Immutable-Data" class="headerlink" title="什么是 Immutable Data"></a>什么是 Immutable Data</h2><p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。Immutable 实现的原理是 <strong>Persistent Data Structure</strong> （持久化数据结构），也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 <strong>Structural Sharing</strong> （结构共享），即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。请看下面动画：<br>&gt; 擦，费了好大劲做了个 Gif 动画，竟然被强制转成了静态图，请移步 <a href="https://zhuanlan.zhihu.com/%22http://link.zhihu.com/?target=http%3A//img.alicdn.com/tps/i2/TB1zzi_KXXXXXctXFXXbrb8OVXX-613-575.gif%5C%22" target="_blank" rel="noopener">http://img.alicdn.com/tps/i2/TB1zzi_KXXXXXctXFXXbrb8OVXX-613-575.gif</a> 观看</p><p>目前流行的 Immutable 库有两个：</p><ol><li>immutable.js</li></ol><p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 Persistent Data Structure，还有很多易用的数据类型。像 <code>Collection</code> 、 <code>List</code> 、 <code>Map</code> 、 <code>Set</code> 、 <code>Record</code> 、 <code>Seq</code> 。有非常全面的 <code>map</code> 、 <code>filter</code> 、 <code>groupBy</code> 、 <code>reduce</code> <code>find</code> 函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。其中有 3 种最重要的数据结构说明一下：（Java 程序员应该最熟悉了）</p><ul><li><p>Map：键值对集合，对应于 Object，ES6 也有专门的 Map 对象</p></li><li><p>List：有序可重复的列表，对应于 Array</p></li><li><p>Set：无序且不可重复的列表</p></li></ul><ol><li>seamless-immutable</li></ol><p>与 Immutable.js 学院派的风格不同，seamless-immutable 并没有实现完整的 Persistent Data Structure，而是使用 <code>Object.defineProperty</code> （因此只能在 IE9 及以上使用）扩展了 JavaScript 的 Array 和 Object 对象来实现，只支持 Array 和 Object 两种数据类型，API 基于与 Array 和 Object 操持不变。代码库非常小，压缩后下载只有 2K。而 Immutable.js 压缩后下载有 16K。</p><p>下面上代码来感受一下两者的不同：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 原来的写法\nlet foo = &#123;a: &#123;b: 1&#125;&#125;;\nlet bar = foo;\nbar.a.b = 2;\nconsole.log(foo.a.b); // 打印 2\nconsole.log(foo === bar); // 打印 true\n\n// 使用 immutable.js 后\nimport Immutable from &apos;immutable&apos;;\nfoo = Immutable.fromJS(&#123;a: &#123;b: 1&#125;&#125;);\nbar = foo.setIn([&apos;a&apos;, &apos;b&apos;], 2); // 使用 setIn 赋值\nconsole.log(foo.getIn([&apos;a&apos;, &apos;b&apos;])); // 使用 getIn 取值，打印 1\nconsole.log(foo === bar); // 打印 false\n\n// 使用 seamless-immutable.js 后\nimport SImmutable from &apos;seamless-immutable&apos;;\nfoo = SImmutable(&#123;a: &#123;b: 1&#125;&#125;)\nbar = foo.merge(&#123;a: &#123; b: 2&#125;&#125;) // 使用 merge 赋值\nconsole.log(foo.a.b); // 像原生 Object 一样取值，打印 1\n\nconsole.log(foo === bar); // 打印 false\n</span><br></pre></td></tr></table></figure><h2 id="Immutable-优点"><a href="#Immutable-优点" class="headerlink" title="Immutable 优点"></a>Immutable 优点</h2><ol><li>Immutable 降低了 Mutable 带来的复杂度可变（Mutable）数据耦合了 Time 和 Value 的概念，造成了数据很难被回溯。</li></ol><p>比如下面一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function touchAndLog(touchFn) &#123;\n let data = &#123; key: &apos;value&apos; &#125;;\n touchFn(data);\n console.log(data.key); // 猜猜会打印什么？\n&#125;\n</span><br></pre></td></tr></table></figure><p>在不查看 <code>touchFn</code> 的代码的情况下，因为不确定它对 <code>data</code> 做了什么，你是不可能知道会打印什么（这不是废话吗）。但如果 <code>data</code> 是 Immutable 的呢，你可以很肯定的知道打印的是 <code>value</code> 。</p><ol><li>节省内存<br>Immutable.js 使用了 Structure Sharing 会尽量复用内存。没有被引用的对象会被垃圾回收。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Map&#125; from &apos;immutable&apos;;\nlet a = Map(&#123;\n select: &apos;users&apos;,\n filter: Map(&#123; name: &apos;Cam&apos; &#125;)\n&#125;)\nlet b = a.set(&apos;select&apos;, &apos;people&apos;);\n\na === b; // false\n\na.get(&apos;filter&apos;) === b.get(&apos;filter&apos;); // true\n</span><br></pre></td></tr></table></figure><p>上面 a 和 b 共享了没有变化的 <code>filter</code> 节点。</p><ol><li>Undo_Redo，Copy_Paste，甚至时间旅行这些功能做起来小菜一碟因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。</li></ol><p>后面我会提供 Flux 做 Undo 的示例。</p><ol><li>并发安全传统的并发非常难做，因为要处理各种数据不一致问题，因此『聪明人』发明了各种锁来解决。但使用了 Immutable 之后，数据天生是不可变的， <strong>并发锁就不需要了</strong> 。</li></ol><p>然而现在并没什么卵用，因为 JavaScript 还是单线程运行的啊。但未来可能会加入，提前解决未来的问题不也挺好吗？</p><ol><li>拥抱函数式编程<br>Immutable 本身就是函数式编程中的概念，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。</li></ol><p>像 ClojureScript，Elm 等函数式编程语言中的数据类型天生都是 Immutable 的，这也是为什么 ClojureScript 基于 React 的框架 — Om 性能比 React 还要好的原因。</p><h2 id="使用-Immutable-的缺点"><a href="#使用-Immutable-的缺点" class="headerlink" title="使用 Immutable 的缺点"></a>使用 Immutable 的缺点</h2><ol><li>需要学习新的 API</li></ol><p>No Comments</p><ol><li>增加了资源文件大小</li></ol><p>No Comments</p><ol><li>容易与原生对象混淆</li></ol><p>这点是我们使用 Immutable.js 过程中遇到最大的问题。写代码要做思维上的转变。</p><p>虽然 Immutable.js 尽量尝试把 API 设计的原生对象类似，有的时候还是很难区别到底是 Immutable 对象还是原生对象，容易混淆操作。<br>Immutable 中的 Map 和 List 虽对应原生 Object 和 Array，但操作非常不同，比如你要用 <code>map.get(&#39;key&#39;)</code> 而不是 <code>map.key</code> ， <code>array.get(0)</code> 而不是 <code>array[0]</code> 。另外 Immutable 每次修改都会返回新对象，也很容易忘记赋值。当使用外部库的时候，一般需要使用原生对象，也很容易忘记转换。下面给出一些办法来避免类似问题发生：</p><ul><li><p>使用 Flow 或 TypeScript 这类有静态类型检查的工具</p></li><li><p>约定变量命名规则：如所有 Immutable 类型对象以 <code>$$</code> 开头。</p></li><li><p>使用 <code>Immutable.fromJS</code> 而不是 <code>Immutable.Map</code> 或 <code>Immutable.List</code> 来创建对象，这样可以避免 Immutable 和原生对象间的混用。</p></li></ul><h2 id="更多认识"><a href="#更多认识" class="headerlink" title="更多认识"></a>更多认识</h2><ol><li>Immutable.is</li></ol><p>两个 immutable 对象可以使用 <code>===</code> 来比较，这样是直接比较内存地址，性能最好。但即使两个对象的值是一样的，也会返回 <code>false</code> ：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let map1 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);\nlet map2 = Immutable.Map(&#123;a:1, b:1, c:1&#125;);\nmap1 === map2; // false\n</span><br></pre></td></tr></table></figure><p>为了直接比较对象的值，immutable.js 提供了 <code>Immutable.is</code> 来做『值比较』，结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Immutable.is(map1, map2); // true\n</span><br></pre></td></tr></table></figure><p><code>Immutable.is</code> 比较的是两个对象的 <code>hashCode</code> 或 <code>valueOf</code> （对于 JavaScript 对象）。由于 immutable 内部使用了 Trie 数据结构来存储，只要两个对象的 <code>hashCode</code> 相等，值就是一样的。这样的算法避免了深度遍历比较，性能非常好。后面会使用 <code>Immutable.is</code> 来减少 React 重复渲染，提高性能。另外，还有 <a href="https://zhuanlan.zhihu.com/%22http://link.zhihu.com/?target=https%3A//github.com/swannodette/mori%5C%22" target="_blank" rel="noopener">mori</a>、<a href="https://zhuanlan.zhihu.com/%22http://link.zhihu.com/?target=https%3A//github.com/mquan/cortex%5C%22" target="_blank" rel="noopener">cortex</a> 等，因为类似就不再介绍。</p><ol><li>与 Object.freeze、const 区别</li></ol><p><code>Object.freeze</code> 和 ES6 中新加入的 <code>const</code> 都可以达到防止对象被篡改的功能，但它们是 shallowCopy 的。对象层级一深就要特殊处理了。</p><ol><li>Cursor 的概念</li></ol><p>这个 Cursor 和数据库中的游标是完全不同的概念。</p><p>由于 Immutable 数据一般嵌套非常深，为了便于访问深层数据，Cursor 提供了可以直接访问这个深层数据的引用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Immutable from &apos;immutable&apos;;\nimport Cursor from &apos;immutable/contrib/cursor&apos;;\n\nlet data = Immutable.fromJS(&#123; a: &#123; b: &#123; c: 1 &#125; &#125; &#125;);\n// 让 cursor 指向 &#123; c: 1 &#125;\nlet cursor = Cursor.from(data, [&apos;a&apos;, &apos;b&apos;], newData =&amp;gt; &#123;\n // 当 cursor 或其子 cursor 执行 update 时调用\n console.log(newData);\n&#125;);\n\ncursor.get(&apos;c&apos;); // 1\ncursor = cursor.update(&apos;c&apos;, x =&amp;gt; x + 1);\ncursor.get(&apos;c&apos;); // 2\n</span><br></pre></td></tr></table></figure><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><ol><li>与 React 搭配使用，Pure Render</li></ol><p>熟悉 React 的都知道，React 做性能优化时有一个避免重复渲染的大招，就是使用 <code>shouldComponentUpdate()</code> ，但它默认返回 <code>true</code> ，即始终会执行 <code>render()</code> 方法，然后做 Virtual DOM 比较，并得出是否需要做真实 DOM 更新，这里往往会带来很多无必要的渲染并成为性能瓶颈。</p><p>当然我们也可以在 <code>shouldComponentUpdate()</code> 中使用使用 deepCopy 和 deepCompare 来避免无必要的 <code>render()</code> ，但 <strong>deepCopy 和 deepCompare 一般都是非常耗性能的</strong> 。<br><strong>Immutable 则提供了简洁高效的判断数据是否变化的方法</strong> ，只需 <code>===</code> 和 <code>is</code> 比较就能知道是否需要执行 <code>render()</code> ，而这个 <strong>操作几乎 0 成本</strong> ，所以可以极大提高性能。修改后的 <code>shouldComponentUpdate</code> 是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; is &#125; from &apos;immutable&apos;;\n\nshouldComponentUpdate: (nextProps = &#123;&#125;, nextState = &#123;&#125;) =&amp;gt; &#123;\n const thisProps = this.props || &#123;&#125;, thisState = this.state || &#123;&#125;;\n\n if (Object.keys(thisProps).length !== Object.keys(nextProps).length ||\n Object.keys(thisState).length !== Object.keys(nextState).length) &#123;\n return true;\n &#125;\n\n for (const key in nextProps) &#123;\n if (thisProps[key] !== nextProps[key] || ！is(thisProps[key], nextProps[key])) &#123;\n return true;\n &#125;\n &#125;\n\n for (const key in nextState) &#123;\n if (thisState[key] !== nextState[key] || ！is(thisState[key], nextState[key])) &#123;\n return true;\n &#125;\n &#125;\n return false;\n&#125;\n</span><br></pre></td></tr></table></figure><p>使用 Immutable 后，如下图，当红色节点的 state 变化后，不会再渲染树中的所有节点，而是只渲染图中绿色的部分：你也可以借助 <code>React.addons.PureRenderMixin</code> 或支持 class 语法的 <a href="https://zhuanlan.zhihu.com/%22http://link.zhihu.com/?target=https%3A//github.com/felixgirault/pure-render-decorator%5C%22" target="_blank" rel="noopener">pure-render-decorator</a> 来实现。<br><strong>setState 的一个技巧</strong></p><p>React 建议把 <code>this.state</code> 当作 Immutable 的，因此修改前需要做一个 deepCopy，显得麻烦：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &apos;_&apos; from &apos;lodash&apos;;\n\nconst Component = React.createClass(&#123;\n getInitialState() &#123;\n return &#123;\n data: &#123; times: 0 &#125;\n &#125;\n &#125;,\n handleAdd() &#123;\n let data = _.cloneDeep(this.state.data);\n data.times = data.times + 1;\n this.setState(&#123; data: data &#125;);\n // 如果上面不做 cloneDeep，下面打印的结果会是已经加 1 后的值。\n console.log(this.state.data.times);\n &#125;\n&#125;\n</span><br></pre></td></tr></table></figure><p>使用 Immutable 后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getInitialState() &#123;\n return &#123;\n data: Map(&#123; times: 0 &#125;)\n &#125;\n &#125;,\n handleAdd() &#123;\n this.setState(&#123; data: this.state.data.update(&apos;times&apos;, v =&amp;gt; v + 1) &#125;);\n // 这时的 times 并不会改变\n console.log(this.state.data.get(&apos;times&apos;));\n &#125;\n</span><br></pre></td></tr></table></figure><p>上面的 <code>handleAdd</code> 可以简写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handleAdd() &#123;\n this.setState((&#123;data&#125;) =&amp;gt; (&#123;\n data: data.update(&apos;times&apos;, v =&amp;gt; v + 1) &#125;)\n &#125;);\n &#125;\n</span><br></pre></td></tr></table></figure><ol><li>与 Flux 搭配使用由于 Flux 并没有限定 Store 中数据的类型，使用 Immutable 非常简单。</li></ol><p>现在是实现一个类似带有添加和撤销功能的 Store：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123; Map, OrderedMap &#125; from &apos;immutable&apos;;\nlet todos = OrderedMap();\nlet history = []; // 普通数组，存放每次操作后产生的数据\n\nlet TodoStore = createStore(&#123;\n getAll() &#123; return todos; &#125;\n&#125;);\n\nDispatcher.register(action =&amp;gt; &#123;\n if (action.actionType === &apos;create&apos;) &#123;\n let id = createGUID();\n history.push(todos); // 记录当前操作前的数据，便于撤销\n todos = todos.set(id, Map(&#123;\n id: id,\n complete: false,\n text: action.text.trim()\n &#125;));\n TodoStore.emitChange();\n &#125; else if (action.actionType === &apos;undo&apos;) &#123;\n // 这里是撤销功能实现，\n // 只需从 history 数组中取前一次 todos 即可\n if (history.length &amp;gt; 0) &#123;\n todos = history.pop();\n &#125;\n TodoStore.emitChange();\n &#125;\n&#125;);\n</span><br></pre></td></tr></table></figure><ol><li>与 Redux 搭配使用</li></ol><p><a href="https://zhuanlan.zhihu.com/%22http://link.zhihu.com/?target=https%3A//github.com/rackt/redux%5C%22" target="_blank" rel="noopener">Redux</a> 是目前流行的 Flux 衍生库。它简化了 Flux 中多个 Store 的概念，只有一个 Store，数据操作通过 Reducer 中实现；同时它提供更简洁和清晰的单向数据流（View -&gt; Action -&gt; Middleware -&gt; Reducer），也更易于开发同构应用。目前已经在我们项目中大规模使用。</p><p>由于 Redux 中内置的 <code>combineReducers</code> 和 reducer 中的 <code>initialState</code> 都为原生的 Object 对象，所以不能和 Immutable 原生搭配使用。幸运的是，Redux 并不排斥使用 Immutable，可以自己重写 <code>combineReducers</code> 或使用 <a href="https://zhuanlan.zhihu.com/%22http://link.zhihu.com/?target=https%3A//github.com/indexiatech/redux-immutablejs%5C%22" target="_blank" rel="noopener">redux-immutablejs</a> 来提供支持。上面我们提到 Cursor 可以方便检索和 update 层级比较深的数据，但因为 Redux 中已经有了 select 来做检索，Action 来更新数据，因此 Cursor 在这里就没有用武之地了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Immutable 可以给应用带来极大的性能提升，但是否使用还要看项目情况。由于侵入性较强，新项目引入比较容易，老项目迁移需要评估迁移。对于一些提供给外部使用的公共组件，最好不要把 Immutable 对象直接暴露在对外接口中。</p><p>如果 JS 原生 Immutable 类型会不会太美，被称为 React API 终结者的 Sebastian Markbåge 有一个这样的 <a href="https://zhuanlan.zhihu.com/%22http://link.zhihu.com/?target=https%3A//github.com/sebmarkbage/ecmascript-immutable-data-structures%5C%22" target="_blank" rel="noopener">提案</a> ，能否通过现在还不确定。不过可以肯定的是 Immutable 会被越来越多的项目使用。<br>&gt; 码这么多字不容易，喜欢就给个赞吧，亲</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Immutable-详解及-React-中实践&quot;&gt;&lt;a href=&quot;#Immutable-详解及-React-中实践&quot; class=&quot;headerlink&quot; title=&quot;Immutable 详解及 React 中实践&quot;&gt;&lt;/a&gt;Immutable 详解及 React 中实践&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Shared mutable state is the root of all evil（共享的可变状态是万恶之源）&lt;/p&gt;
&lt;p&gt;– Pete Hunt&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有人说 Immutable 可以给 React 应用带来数十倍的提升，也有人说 Immutable 的引入是近期 JavaScript 中伟大的发明，因为同期 React 太火，它的光芒被掩盖了。这些至少说明 Immutable 是很有价值的，下面我们来一探究竟。&lt;br&gt;JavaScript 中的对象一般是可变的（Mutable），因为使用了引用赋值，新的对象简单的引用了原始对象，改变新的对象将影响到原始对象。如 &lt;code&gt;foo={a: 1}; bar=foo; bar.a=2&lt;/code&gt; 你会发现此时 &lt;code&gt;foo.a&lt;/code&gt; 也被改成了 &lt;code&gt;2&lt;/code&gt; 。虽然这样做可以节约内存，但当应用复杂后，这就造成了非常大的隐患，Mutable 带来的优点变得得不偿失。为了解决这个问题，一般的做法是使用 shallowCopy（浅拷贝）或 deepCopy（深拷贝）来避免被修改，但这样做造成了 CPU 和内存的浪费。&lt;/p&gt;
&lt;p&gt;Immutable 可以很好地解决这些问题。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="函数式编程" scheme="https://weiTimes.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
      <category term="React" scheme="https://weiTimes.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>React native 分辨率适配</title>
    <link href="https://weiTimes.github.io/2017/07/24/React%20native%20%E5%88%86%E8%BE%A8%E7%8E%87%E9%80%82%E9%85%8D/"/>
    <id>https://weiTimes.github.io/2017/07/24/React native 分辨率适配/</id>
    <published>2017-07-24T08:44:51.000Z</published>
    <updated>2017-07-25T03:38:13.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="React-native-分辨率适配"><a href="#React-native-分辨率适配" class="headerlink" title="React native 分辨率适配"></a>React native 分辨率适配</h1><p><a href="http://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native</a> 中使用的尺寸单位是pt，是一个绝对长度，而设计师使用的是px, 这两种尺寸如何换算呢？官方提供了 <a href="https://facebook.github.io/react-native/docs/pixelratio.html" target="_blank" rel="noopener">PixelRatio</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;PixelRatio&#125; from &apos;react-native&apos;;</span><br><span class="line">const pt2px = pt=&gt;PixelRatio.getPixelSizeForLayoutSize(pt);</span><br><span class="line">const px2pt = px=&gt;PixelRatio.roundToNearestPixel(px);</span><br></pre></td></tr></table></figure><p>设计师给你一个尺寸，比如100px*200px的View，按照下面的方式可实现设计还原：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;View style=&#123;&#123;width:px2pt(100),height:px2pt(200),backgroundColor:&quot;red&quot;&#125;&#125;/&gt;</span><br></pre></td></tr></table></figure><p>这个时候，你或许会说，这也太麻烦了，每个有尺寸的地方我都得转么，能不能我直接用px写，当然可以，不过需要整体加个缩放系数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import &#123;PixelRatio,Dimensions&#125;&#125; from &apos;react-native&apos;;</span><br><span class="line">const pt2px = pt=&gt;PixelRatio.getPixelSizeForLayoutSize(pt);</span><br><span class="line">const px2pt = px=&gt;PixelRatio.roundToNearestPixel(px); let pxRatio = PixelRatio.get();</span><br><span class="line">let &#123;win_width,win_height&#125; = Dimensions.get(&quot;window&quot;); let scale = 1/pxRatio;</span><br><span class="line">let width = pt2px(win_width);</span><br><span class="line">let height = pt2px(win_height);</span><br><span class="line">const com = props=&gt;( &lt;View sytle=&#123;styles.container&#125;&gt; &lt;View style=&#123;&#123;width:100,height:200,backgroundColor:&quot;red&quot;&#125;&#125;/&gt; &lt;/View&gt;) const styles=&#123; container: &#123; width:width, height:height, transform:[&#123;translateX:-width*.5&#125;, &#123;translateY:-height*.5&#125;, &#123;scale:scale&#125;, &#123;translateX:width*.5&#125;, &#123;translateY:height*.5&#125;] &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样处理后，在根节点内，你再也不用考虑pt的问题了，直接使用px即可。</p><p>不过此时还有另外一个问题，设计尺寸是死的，屏幕大小是活的，得考虑分辨率适配啊，那在不同的分辨率下如何正确的实现设计师的设计呢？</p><p>我们将使用一种游戏经常会用到得方案，fixedWidth/fixedHeight.</p><blockquote><p>fixedWidth 模式是保持原始宽高比缩放应用程序内容，缩放后应用程序内容在水平和垂直方向都填满播放器窗口，但只保持应用程序内容的原始宽度不变，高度可能会改变,简言之 <strong>宽度固定，高度自适应</strong> 。  </p></blockquote><h3 id="fixedHeight"><a href="#fixedHeight" class="headerlink" title="fixedHeight"></a>fixedHeight</h3><blockquote><p>fixedHeight 模式是保持原始宽高比缩放应用程序内容，缩放后应用程序内容在水平和垂直方向都填满播放器窗口，但只保持应用程序内容的原始高度不变，宽度可能会改变,简言之 <strong>高度固定，宽度自适应</strong> 。  </p></blockquote><p>具体如何应用呢，别急，一步步来。<br>先来看看如何得到屏幕的像素宽高：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import &#123;Dimensions,PixelRatio&#125; from &apos;react-native&apos;; let &#123;width,height&#125; = Dimensions.get(&quot;window&quot;);</span><br><span class="line">let w =pt2px(width);</span><br><span class="line">let h = pt2px(height);</span><br></pre></td></tr></table></figure><p>假定我们的设计尺寸是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let designSize = &#123;width:750,height:1336&#125;;</span><br></pre></td></tr></table></figure><p>按照fixedWidth、fixedHeight的定义，我们计算下新的宽高：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//fixedWidth</span><br><span class="line">let scale = designSize.width/w;</span><br><span class="line">let winSize = &#123;width:designSize.width,height:h*scale&#125;; //fixedHeight</span><br><span class="line">let scale = designSize.height/h;</span><br><span class="line">let winSize = &#123;width:designSize.width*scale,height:designSize.height&#125;;</span><br></pre></td></tr></table></figure><p>这个winsize就是最终实际用来布局的屏幕尺寸,此时我们又会多了一个分辨率适配的缩放系数，还记得我们前一个我们添加的为了使用px的缩放系数么，我们在这里做一个整合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import &#123;PixelRatio,Dimensions&#125;&#125; from &apos;react-native&apos;;</span><br><span class="line">const pt2px = pt=&gt;PixelRatio.getPixelSizeForLayoutSize(pt);</span><br><span class="line">const px2pt = px=&gt;PixelRatio.roundToNearestPixel(px); let designSize = &#123;width:750,height:1336&#125;; let pxRatio = PixelRatio.get();</span><br><span class="line">let &#123;win_width,win_height&#125; = Dimensions.get(&quot;window&quot;); let width = pt2px(win_width);</span><br><span class="line">let height = pt2px(win_height); let design_scale = designSize.width/width;</span><br><span class="line">height = height*design_scale let scale = 1/pxRatio/design_scale; const com = props=&gt;( &lt;View sytle=&#123;styles.container&#125;&gt; &lt;View style=&#123;&#123;width:100,height:200,backgroundColor:&quot;red&quot;&#125;&#125;/&gt; &lt;/View&gt;) const styles=&#123; container: &#123; width:width, height:height, transform:[&#123;translateX:-width*.5&#125;, &#123;translateY:-height*.5&#125;, &#123;scale:scale&#125;, &#123;translateX:width*.5&#125;, &#123;translateY:height*.5&#125;] &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在后续的开发中将不必再关注适配的问题，只需要按照设计师给的尺寸实现布局即可。</p><p>最后再附上一个工具类 Resolution.js：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component, PropTypes&#125; from &apos;react&apos;;</span><br><span class="line">import &#123; Dimensions, PixelRatio, Platform, StatusBar, View</span><br><span class="line">&#125; from &apos;react-native&apos;; let props = &#123;&#125;;</span><br><span class="line">export default class Resolution &#123; static get(useFixWidth = true)&#123; return useFixWidth?&#123;...props.fw&#125;:&#123;...props.fh&#125; &#125; static setDesignSize(dwidth=750,dheight=1336,dim=&quot;window&quot;)&#123; let designSize = &#123;width:dwidth,height:dheight&#125;; let navHeight = Platform.OS === &apos;android&apos; ? StatusBar.currentHeight : 64; let pxRatio = PixelRatio.get(dim); let &#123;width,height&#125; = Dimensions.get(dim); if(dim != &quot;screen&quot;)height-=navHeight; height -= Platform.OS === &apos;android&apos; ? 20 : 0;let w = PixelRatio.getPixelSizeForLayoutSize(width); let h = PixelRatio.getPixelSizeForLayoutSize(height); let fw_design_scale = designSize.width/w; fw_width = designSize.width; fw_height = h*fw_design_scale; fw_scale = 1/pxRatio/fw_design_scale; let fh_design_scale = designSize.height/h; fh_width = w*fh_design_scale; fh_height = designSize.height; fh_scale = 1/pxRatio/fh_design_scale; props.fw = &#123;width:fw_width,height:fw_height,scale:fw_scale,navHeight&#125;; props.fh = &#123;width:fh_width,height:fh_height,scale:fh_scale,navHeight&#125;; &#125; static FixWidthView = (p) =&gt; &#123; let &#123;width,height,scale,navHeight&#125; = props.fw; return ( &lt;View &#123;...p&#125; style=&#123;&#123; marginTop:navHeight, width:width, height:height, backgroundColor: &apos;transparent&apos;, transform:[&#123;translateX:-width*.5&#125;, &#123;translateY:-height*.5&#125;, &#123;scale:scale&#125;, &#123;translateX:width*.5&#125;, &#123;translateY:height*.5&#125;] &#125;&#125;&gt; &lt;/View&gt; ); &#125;; static FixHeightView = (p) =&gt; &#123; let &#123;width,height,scale,navHeight&#125; = props.fh; return ( &lt;View &#123;...p&#125; style=&#123;&#123; marginTop:navHeight, width:width, height:height, backgroundColor: &apos;transparent&apos;, transform:[&#123;translateX:-width*.5&#125;, &#123;translateY:-height*.5&#125;, &#123;scale:scale&#125;, &#123;translateX:width*.5&#125;, &#123;translateY:height*.5&#125;] &#125;&#125;&gt; &#123;p.children&#125; &lt;/View&gt; ); &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">//init</span><br><span class="line">Resolution.setDesignSize();</span><br></pre></td></tr></table></figure><p>How to use:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123; Component &#125; from &apos;react&apos;;</span><br><span class="line">import &#123; AppRegistry, StyleSheet, Text, Image, View</span><br><span class="line">&#125; from &apos;react-native&apos;; import Resolution from &quot;./Resolution&quot; export default class tets extends Component &#123; render() &#123; return ( &lt;Resolution.FixWidthView style=&#123;styles.container&#125;&gt; &lt;Image source=&#123;require(&quot;./assets/bg_day.jpg&quot;)&#125; style=&#123;&#123;position:&quot;absolute&quot;&#125;&#125;/&gt; &lt;Text style=&#123;styles.welcome&#125;&gt; Welcome to React Native! &lt;/Text&gt; &lt;Text style=&#123;styles.instructions&#125;&gt; To get started, edit index.ios.js &lt;/Text&gt; &lt;Text style=&#123;styles.instructions&#125;&gt; Press Cmd+R to reload,&#123;&apos;\n&apos;&#125; Cmd+D or shake for dev menu &lt;/Text&gt; &lt;/Resolution.FixWidthView&gt; ); &#125;</span><br><span class="line">&#125; const styles = StyleSheet.create(&#123; container: &#123; flex: 0, justifyContent: &apos;center&apos;, alignItems: &apos;center&apos;, // backgroundColor: &apos;\#ff0000&apos;, &#125;, welcome: &#123; fontSize: 20, textAlign: &apos;center&apos;, margin: 10, backgroundColor:&quot;transparent&quot; &#125;, instructions: &#123; backgroundColor:&quot;transparent&quot;, textAlign: &apos;center&apos;, color: 0xffff, marginBottom: 5, &#125;,</span><br><span class="line">&#125;); AppRegistry.registerComponent(&apos;rn_resolution&apos;, () =&gt; tets);</span><br></pre></td></tr></table></figure><p>bg_day.jpg的尺寸是750*1500，上面的程序在所有的分辨率下图片都能正确显示。</p><p>这里有个demo： <a href="https://github.com/TerranTian/rn_resolution" target="_blank" rel="noopener">Github</a> ，如果解决你的问题了，记得给我加星哦~~</p><p>另外：不同分辨率下背景图片尺寸如何选择，移步另一篇博文： <a href="http://www.jianshu.com/p/b4bfc7ba11b0" target="_blank" rel="noopener">《分辨率适配的取值范围》</a></p><p><a href="http://www.jianshu.com/p/7836523b4d20" target="_blank" rel="noopener">React native 分辨率适配</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;React-native-分辨率适配&quot;&gt;&lt;a href=&quot;#React-native-分辨率适配&quot; class=&quot;headerlink&quot; title=&quot;React native 分辨率适配&quot;&gt;&lt;/a&gt;React native 分辨率适配&lt;/h1&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://weiTimes.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>前端工作流</title>
    <link href="https://weiTimes.github.io/2017/05/25/%E5%89%8D%E7%AB%AF%E5%B7%A5%E4%BD%9C%E6%B5%81/"/>
    <id>https://weiTimes.github.io/2017/05/25/前端工作流/</id>
    <published>2017-05-25T06:10:38.000Z</published>
    <updated>2017-08-11T01:26:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端工作流"><a href="#前端工作流" class="headerlink" title="前端工作流"></a>前端工作流</h2><h3 id="转译"><a href="#转译" class="headerlink" title="转译"></a>转译</h3><p><em>即转换+编译的一种技术，用来将ES6代码转换为可以在ES5的环境中工作的工具，现在较常用的是使用babel编译器进行转译</em></p><h3 id="开发者工具控制台"><a href="#开发者工具控制台" class="headerlink" title="开发者工具控制台"></a>开发者工具控制台</h3><p><em>打开一个新的标签页：在地址栏输入 about:blank</em></p><p><em>在控制台中一次键入多行，新开一行不执行代码：shift + enter</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端工作流&quot;&gt;&lt;a href=&quot;#前端工作流&quot; class=&quot;headerlink&quot; title=&quot;前端工作流&quot;&gt;&lt;/a&gt;前端工作流&lt;/h2&gt;&lt;h3 id=&quot;转译&quot;&gt;&lt;a href=&quot;#转译&quot; class=&quot;headerlink&quot; title=&quot;转译&quot;&gt;&lt;/a&gt;转
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>React Native Android 与 IOS的适配</title>
    <link href="https://weiTimes.github.io/2017/05/20/React%20Native%20Android%20%E4%B8%8E%20IOS%E7%9A%84%E9%80%82%E9%85%8D/"/>
    <id>https://weiTimes.github.io/2017/05/20/React Native Android 与 IOS的适配/</id>
    <published>2017-05-20T09:43:07.000Z</published>
    <updated>2017-05-20T10:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native-之Android-与-IOS的双适配"><a href="#React-Native-之Android-与-IOS的双适配" class="headerlink" title="React Native 之Android 与 IOS的双适配"></a>React Native 之Android 与 IOS的双适配</h2><blockquote><p>React Native代码的可重用度极高，一般来说在90%以上，即Android, IOS可共用一套代码，不过还是有些地方需要对两个平台的适配作一个处理的，例如顶部导航栏的高度、阴影效果的处理等等，需要我们对官方提供的组件或者是两个平台的运行效果有一定了解</p></blockquote><p><strong>导航栏的高度</strong></p><p><em>ios: 44</em></p><p><em>android: 50</em></p><p><strong>状态栏的高度</strong></p><p><em>ios: 20</em></p><p><em>android: 0</em></p><p><strong>阴影效果(样式)</strong></p><p><em>ios: shadowOffset, shadowRadius</em></p><p><em>android: elevation</em></p><p><strong>ListView中的RefreshControl(刷新器)的颜色</strong></p><p><em>ios: tintColor</em></p><p><em>android: colors</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Native-之Android-与-IOS的双适配&quot;&gt;&lt;a href=&quot;#React-Native-之Android-与-IOS的双适配&quot; class=&quot;headerlink&quot; title=&quot;React Native 之Android 与 IOS的双适
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://weiTimes.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>在React Native中用WebView打开非HTTPS的的站点</title>
    <link href="https://weiTimes.github.io/2017/05/17/%E5%9C%A8React%20Native%E4%B8%AD%E7%94%A8WebView%E6%89%93%E5%BC%80%E9%9D%9EHTTPS%E7%9A%84%E7%9A%84%E7%AB%99%E7%82%B9/"/>
    <id>https://weiTimes.github.io/2017/05/17/在React Native中用WebView打开非HTTPS的的站点/</id>
    <published>2017-05-17T08:30:39.000Z</published>
    <updated>2017-05-24T10:56:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在React-Native中用WebView打开非HTTPS的的站点"><a href="#在React-Native中用WebView打开非HTTPS的的站点" class="headerlink" title="在React Native中用WebView打开非HTTPS的的站点"></a>在React Native中用WebView打开非HTTPS的的站点</h2><blockquote><p>在React Native应用中使用WebView可以复用已经写好的web页面。</p></blockquote><p><em>在如果我们的应用在IOS9或者更高的版本中使用WebView尝试连接任何的HTTP服务，将会请求失败，也就不能成功地载入web页面，因为HTTP服务不支持最新的SSL技术</em></p><p><strong>让我们看一下这个以下操作。这里我们尝试在WebView中访问HTTP的站点</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;WebView</span><br><span class="line"> contentInset=&#123;&#123; <span class="attr">top</span>: <span class="number">-50</span> &#125;&#125;</span><br><span class="line">                        startInLoadingState=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                        source=&#123;&#123; <span class="attr">uri</span>: <span class="string">'http://movie.douban.com/subject/25862357/'</span> &#125;&#125;</span><br><span class="line">                        <span class="comment">//source=&#123;&#123; uri: this.props.url &#125;&#125;</span></span><br><span class="line">                        style=&#123;styles.webView&#125;</span><br><span class="line">                    /&gt;</span><br></pre></td></tr></table></figure><p><strong>在IOS9.0或者更高的环境下，在iPhone模拟器中运行应用，将会出现错误信息</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Error Loading Page</span><br><span class="line">Domain: NSURLErrorDomain</span><br><span class="line">Error Code: -1022</span><br><span class="line">Description: The resource could not be loaded because</span><br><span class="line">the App Transport Security policy requires the use of a</span><br><span class="line">secure connection</span><br></pre></td></tr></table></figure><p>理想情况下，这个站点会尝试去连接HTTPS服务。然而，该站点HTTPS服务可能没有被启用或者不支持。</p><p>例如，我们在开发app的过程中，可能会想要去连接HTTP的服务。</p><h3 id="使用Xcode-将使用的站点服务加入白名单"><a href="#使用Xcode-将使用的站点服务加入白名单" class="headerlink" title="使用Xcode-将使用的站点服务加入白名单"></a>使用Xcode-将使用的站点服务加入白名单</h3><p><strong>为了在WebView中访问HTTP站点，我们需要在Xcode中打开项目，然后打开 <code>Info.plist</code> file</strong></p><p>在打开的列表中，我们可以找到<code>App Transport Security Settings</code></p><p>当我们展开找到的这一项时，可以看到在<code>Exception Domains</code>中的<code>localhost</code>，在<code>localhost</code>的展开项中有<code>NSTemporaryExceptionAllowsInsecureHTTPLoads</code>，而且它的value值是<code>true</code></p><p>因为有了以上设置，当我们连接<code>localhost</code>的服务时，app可以成功运行，即使访问的站点服务支持的类型是HTTP而不是HTTPS.</p><p>所以为了能够成功访问非HTTPS的站点，我们需要将访问站点的URL添加到白名单。</p><ol><li>鼠标移到<code>Exception Domains</code>上，我们可以看到 在右边栏的<code>+</code> </li><li>点击添加我们的domain，并且设置它的类型为<code>dictionary</code></li><li>现在点击我们刚才添加的domain,然后添加一项key值为<code>NSTemporaryExceptionAllowsInsecureHTTPLoads</code>,类型为<code>Boolean</code>,value值为<code>YES</code>,和之前我们看到的localhost下的设置项是一样的</li><li>在终端运行<code>react-native run-ios</code>，我们的应用将会被重新加载，如果没有成功，在运行应用之前先使用xcode<code>clean build</code></li></ol><h3 id="使用Xcode-将所有站点服务加入白名单"><a href="#使用Xcode-将所有站点服务加入白名单" class="headerlink" title="使用Xcode-将所有站点服务加入白名单"></a>使用Xcode-将所有站点服务加入白名单</h3><p>在实际开发过程中一个个地将站点加入白名单会显得有点麻烦，这时候我们可以将所有的域名都加入白名单。</p><p>为了允许所有非HTTPS的站点服务，先删除Xcode中的info.plist里面的<code>Exception Domains</code>，然后添加一个新的key值<code>Allow Arbitrary Loads</code>,value值为<code>true</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果使用第一种方法，即将特定的站点服务加入白名单不见效果，可以使用第二种方法，将所有站点服务都加入白名单，亲测有效哦。</p><h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;在React-Native中用WebView打开非HTTPS的的站点&quot;&gt;&lt;a href=&quot;#在React-Native中用WebView打开非HTTPS的的站点&quot; class=&quot;headerlink&quot; title=&quot;在React Native中用WebView打开
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://weiTimes.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native问题集锦及解决方案</title>
    <link href="https://weiTimes.github.io/2017/05/16/React%20Native%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://weiTimes.github.io/2017/05/16/React Native问题集锦及解决方案/</id>
    <published>2017-05-16T03:55:50.000Z</published>
    <updated>2017-11-10T06:38:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native问题集锦及解决方案"><a href="#React-Native问题集锦及解决方案" class="headerlink" title="React Native问题集锦及解决方案"></a>React Native问题集锦及解决方案</h2><blockquote><p>在React Native的实际开发过程中，会遇到各种各样的问题，有时候花了一段时间去解决完一个问题之后，过了很久可能会又遇到了，由于当时没有记录与总结，所以很可能忘了，然后只能继续去踩坑了，虽然踩坑的速度要比之前快些，但总是费事，所以我将我遇到的问题作一个记录，一个是方便自己查看，另一个希望给有遇到过相同或者相似问题的童鞋一点帮助</p></blockquote><p><strong>TextInput获得焦点时，模拟器不出现键盘</strong></p><p><em>需要勾选Hardware -&gt; Keyboard -&gt; Toggle Software keyboard</em></p><p><strong>路由跳转的时候，会出现透明的背景色，看起来很不协调</strong></p><p><em>可以给组件添加一个背景色</em></p><p><strong>导入第三方组件<code>react-native-scrollable-tab-view</code>的时候报错，后来发现是版本依赖的问题</strong></p><p><em>安装react-native-scrollable-tab-view的时候指定它的版本为0.7.0，即</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-native-scrollable-tab-view@0.7.0</span><br></pre></td></tr></table></figure><p><strong>Android 不支持 GIF格式的图片</strong></p><p><em>Android 默认是不支持加载GIF的，需要在<code>android/app/build.gradle</code>中添加一些依赖模块</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  // If your app supports Android versions before Ice Cream Sandwich (API level 14)</span><br><span class="line">  compile &apos;com.facebook.fresco:animated-base-support:1.3.0&apos;</span><br><span class="line"></span><br><span class="line">  // For animated GIF support</span><br><span class="line">  compile &apos;com.facebook.fresco:animated-gif:1.3.0&apos;</span><br><span class="line"></span><br><span class="line">  // For WebP support, including animated WebP</span><br><span class="line">  compile &apos;com.facebook.fresco:animated-webp:1.3.0&apos;</span><br><span class="line">  compile &apos;com.facebook.fresco:webpsupport:1.3.0&apos;</span><br><span class="line"></span><br><span class="line">  // For WebP support, without animations</span><br><span class="line">  compile &apos;com.facebook.fresco:webpsupport:1.3.0&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新编译，可以看到GIF成功加载了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;React-Native问题集锦及解决方案&quot;&gt;&lt;a href=&quot;#React-Native问题集锦及解决方案&quot; class=&quot;headerlink&quot; title=&quot;React Native问题集锦及解决方案&quot;&gt;&lt;/a&gt;React Native问题集锦及解决方案&lt;/
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://weiTimes.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>如何初始化本地git项目，并将其添加到远程仓库</title>
    <link href="https://weiTimes.github.io/2017/05/16/%E5%A6%82%E4%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0git%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <id>https://weiTimes.github.io/2017/05/16/如何初始化本地git项目，并将其添加到远程仓库/</id>
    <published>2017-05-16T02:30:36.000Z</published>
    <updated>2017-05-16T02:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何初始化本地git项目，并将其添加到远程仓库"><a href="#如何初始化本地git项目，并将其添加到远程仓库" class="headerlink" title="如何初始化本地git项目，并将其添加到远程仓库"></a>如何初始化本地git项目，并将其添加到远程仓库</h2><blockquote><p>一开始不会使用git同步远程仓库时候，我的做法是先克隆远程仓库，然后将需要上传的代码拷贝进去，接着是commit, push的常规流程。这在实际开发过程中很不友好，于是我就记录一下一个友好的操作步骤</p></blockquote><p><em>初始化本地仓库</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><em>添加项目描述</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add README.md</span><br></pre></td></tr></table></figure><p><em>提交本地代码到本地仓库</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><p><em>将本地仓库关联到远程仓库, 其中仓库地址是你新创建的仓库地址</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/weiTimes/ReactNativeDayAndDay.git</span><br></pre></td></tr></table></figure><p><em>将本地仓库的代码更新到远程仓库</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>刷新新创建的远程仓库的页面地址，可以看到刚才提交上来的文件，如果发现只有README.md, 需要回到项目根目录，进行常规的<code>git commit …</code> 、<code>git push ...</code>等操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何初始化本地git项目，并将其添加到远程仓库&quot;&gt;&lt;a href=&quot;#如何初始化本地git项目，并将其添加到远程仓库&quot; class=&quot;headerlink&quot; title=&quot;如何初始化本地git项目，并将其添加到远程仓库&quot;&gt;&lt;/a&gt;如何初始化本地git项目，并将其添
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="https://weiTimes.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>react-native 版本升级与降级</title>
    <link href="https://weiTimes.github.io/2017/05/15/react-native%20%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E4%B8%8E%E9%99%8D%E7%BA%A7/"/>
    <id>https://weiTimes.github.io/2017/05/15/react-native 版本升级与降级/</id>
    <published>2017-05-15T09:27:30.000Z</published>
    <updated>2017-05-15T13:31:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-native-版本升级与降级"><a href="#react-native-版本升级与降级" class="headerlink" title="react-native 版本升级与降级"></a>react-native 版本升级与降级</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在React Native For Android刚刚开源才不久，现在整体功能还不健全完善以及开发中的坑(Bug)还是比较多的 ，以至于到现在还没有正式版本。项目人员正在加紧开发维护，修复Bug，所以现在React Native项目的版本更新速度还是相对来讲是比较快的。在如此现状之下，我们就要及时关注项目官网了，要将React Native往新版本进行更新，这样我们可以去使用更多的APIs,视图Views,以及开发者工具以及其他一些好用的东西。</p><p>我们大家都知道一个React Native项目使用Android项目,iOS项目和JavaScript项目三部分进行组成的，而且三者都关联打包在npm包内的，所以该项目版本进行更新是比较繁琐的。下面我来给大家讲解一下React Native项目的升级步骤。</p><h3 id="更换React-Native版本"><a href="#更换React-Native版本" class="headerlink" title="更换React Native版本"></a>更换React Native版本</h3><p><em>查看本地React Native 版本</em></p><ul><li>首先我们需要查看本地的React Native的版本，命令行输入如下命令:</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native --version</span><br></pre></td></tr></table></figure><ul><li>进入创建的React Native主目录，然后执行 <code>react-native –version</code>就可以看到react-native-cli和react-native的版本号</li></ul><p><em>查看npm包管理的React Native 版本</em></p><ul><li>通过命令行查看React Native版本</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm info react-native</span><br></pre></td></tr></table></figure><p><em>更换版本</em></p><p>打开项目中的package.json文件，找到dependencies字段，把react-native的版本修改为想要更换的版本</p><p><em>切换到项目主目录，执行</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p><em>如安装成功，查看当前版本</em></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native --version</span><br></pre></td></tr></table></figure><h3 id="更新项目templates"><a href="#更新项目templates" class="headerlink" title="更新项目templates"></a>更新项目templates</h3><p>版本不同，构建的项目模板也会发生变化，所以在更新了React Native版本之后，也要及时更新项目模板</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native upgrade</span><br></pre></td></tr></table></figure><p><em>在更新templates的过程中，会进行文件修改检查，选择覆盖还是保留原文件，需要根据实际情况选择是否覆盖，其中有三点原则</em></p><ul><li>如果是新添加的文件，会进行直接创建</li><li>如果更新文件与原文件相同，直接忽略跳过</li><li>如果更新文件和当前项目文件不同，有冲突情况，会询问开发者选择覆盖还是保留原文件，需要看实际情况</li></ul><p>到这里就完成了版本的更换了，在项目根目录运行<code>react-native run-ios</code>或<code>react-native run-android</code>看看有没有问题吧！<br>另外，在初始化React Native的项目时，如需要指定某个版本，可以输入以下命令,其中–version配置的是版本号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">react-native init HotCodeGithub --verbose --version 0.40.0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;react-native-版本升级与降级&quot;&gt;&lt;a href=&quot;#react-native-版本升级与降级&quot; class=&quot;headerlink&quot; title=&quot;react-native 版本升级与降级&quot;&gt;&lt;/a&gt;react-native 版本升级与降级&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://weiTimes.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>MAC常用命令</title>
    <link href="https://weiTimes.github.io/2017/05/15/MA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://weiTimes.github.io/2017/05/15/MA常用命令/</id>
    <published>2017-05-15T03:00:53.000Z</published>
    <updated>2017-05-15T03:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="显示系统隐藏文件"><a href="#显示系统隐藏文件" class="headerlink" title="显示系统隐藏文件"></a>显示系统隐藏文件</h2><h3 id="运行下面命令"><a href="#运行下面命令" class="headerlink" title="运行下面命令"></a>运行下面命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool true  此命令显示隐藏文件</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles -bool false 此命令关闭显示隐藏</span><br></pre></td></tr></table></figure><h3 id="重新加载Finder-command-option-esc-选中Finder-即可重新启动"><a href="#重新加载Finder-command-option-esc-选中Finder-即可重新启动" class="headerlink" title="重新加载Finder: command + option + esc, 选中Finder, 即可重新启动"></a>重新加载Finder: command + option + esc, 选中Finder, 即可重新启动</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;显示系统隐藏文件&quot;&gt;&lt;a href=&quot;#显示系统隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;显示系统隐藏文件&quot;&gt;&lt;/a&gt;显示系统隐藏文件&lt;/h2&gt;&lt;h3 id=&quot;运行下面命令&quot;&gt;&lt;a href=&quot;#运行下面命令&quot; class=&quot;headerli
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="https://weiTimes.github.io/tags/Mac/"/>
    
      <category term="命令行" scheme="https://weiTimes.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL忘记密码后重置密码( Mac )</title>
    <link href="https://weiTimes.github.io/2017/05/15/abc/"/>
    <id>https://weiTimes.github.io/2017/05/15/abc/</id>
    <published>2017-05-15T02:48:41.000Z</published>
    <updated>2017-05-15T02:59:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装好MySQL以后，系统给了个默认的的密码，当时是第一次在Mac上安装，所以忽略了，后来登录MySQL的时候需要用到密码，但不知道密码，所以得修改这个密码了，然后就走上了不归路。</p></blockquote><p>   这个过程是心酸的，网上的资料多如狗，关键是各有各的错法，尝试了半天没一个对的，在即将打破心理防线，要去翻MySQL文档的时候，成功了有没有。没有一个文章告诉我完整的答案，我是参考了好几个攻略，闭门造出来的车。给自己点赞。不多说了，一步一步跟我</p><ul><li>走关闭MySQL服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/local/mysql/support-files/mysql.server stop</span><br></pre></td></tr></table></figure><p>或者在偏好设置里点击MySQL然后将其关闭</p><ul><li>进入MySQL的二进制命令目录下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/mysql/bin</span><br></pre></td></tr></table></figure><ul><li>获取MySQL操作权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><ul><li><p>重启MySQL服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysqld_safe --skip-grant-tables</span><br></pre></td></tr></table></figure></li><li><p>重开个终端</p></li></ul><hr><ul><li>为了在终端可以使用MySQL的命令，需要配置一下，运行下面两条命令</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias mysql=/usr/local/mysql/bin/mysql</span><br><span class="line">alias mysqladmin=/usr/local/mysql/bin/mysqladminx</span><br></pre></td></tr></table></figure><p>使用这种方法进行配置，一旦终端关闭了，就又得重新配置了，最好的方法是将MySQL的bin目录加入系统PATH，我用的终端是zsh，所以讲命令配置在.zshrc，如果是其他终端，修改的是相应的文件( 例如：bash -&gt; ./.bashrc )</p><p>打开.zshrc, 添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=$PATH:/usr/local/mysql/bin</span><br></pre></td></tr></table></figure></p><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ./.zshrc</span><br></pre></td></tr></table></figure></p><p>输入mysql 进入mysql命令模式</p><p>输入use mysql 进入mysql数据库</p><p>输入flush privileges 获取修改密码的权限</p><p>输入set password for ‘root’@’localhost’=password(‘新密码’) 修改密码</p><p>恭喜你，密码修改成功</p><p>使用新密码登录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>回车后输入新密码<br><img src="https://d3dr1ze7164817.cloudfront.net/items/0U1e0U1E0K2Z2c2i3103/Image%202017-03-12%20at%203.31.50%20%E4%B8%8B%E5%8D%88.png?X-CloudApp-Visitor-Id=47b8b2f14d7cdbb2f690679600100122&amp;v=8fe78e62" alt=""></p><p>出现上面这个就说明成功登录MySQL</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;安装好MySQL以后，系统给了个默认的的密码，当时是第一次在Mac上安装，所以忽略了，后来登录MySQL的时候需要用到密码，但不知道密码，所以得修改这个密码了，然后就走上了不归路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   这个过程是心酸的，
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://weiTimes.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mac 生成 ssh-key</title>
    <link href="https://weiTimes.github.io/2017/04/13/abc/"/>
    <id>https://weiTimes.github.io/2017/04/13/abc/</id>
    <published>2017-04-13T14:20:26.000Z</published>
    <updated>2017-04-13T14:28:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>用Git下载代码得步骤<br>1.首先需要创建公钥，在命令行中输入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;ben@xxx.com&quot;</span><br></pre></td></tr></table></figure><p>然后输入路径，密码之类的，如果不输入，工程就会保存到根目录下面，密码也为空。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/.ssh/id_rsa是私钥，~/.ssh/id_rsa.pub是公钥</span><br></pre></td></tr></table></figure><p>2.接着打开公钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>这里会得到一段很长的编码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCuYZIchz3THIcc/wH0ZB5WZYqe2iBVUNqSzfrgxBvJCZkFHWiUZhA/4omNud/27PVT/FADV9qSvrX7ifP05Cbl6mhE4uJjxOQRNoPdQQcsTEFh5vDvOeiJOT1CoFb9WLGg49Xml4yJmFJqv/Kz5hCe7LEWRYJH6tmaVG0qi9nwAZmjfTQpSWu07eAKB9wAbK6stCdnd5JvMq7IsNNylbwDlXf0RQA4RpppO+14oNBqivhi5ftBPjP15+aWKpnXUxkGMVAefKTvwsyw1T0H2sj+ILVFM4d5xpxu3jPHebqh363OwPPLMsoUy9VhQ3YDtMxt4vyOxvpJ9ekMGlDn/9ut linwenbang@yolanda.hk</span><br></pre></td></tr></table></figure><p>然后在进入GitLab或者Gitblit的个人中心，选择ssh key的配置，将新生成的ssh-key复制进去即可，配置完成之后即可克隆你想要克隆的项目了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;用Git下载代码得步骤&lt;br&gt;1.首先需要创建公钥，在命令行中输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="https://weiTimes.github.io/tags/Mac/"/>
    
      <category term="Git" scheme="https://weiTimes.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+Github,搭建属于自己的博客</title>
    <link href="https://weiTimes.github.io/2017/04/01/HEXO+Github/"/>
    <id>https://weiTimes.github.io/2017/04/01/HEXO+Github/</id>
    <published>2017-04-01T14:44:23.000Z</published>
    <updated>2017-04-01T15:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装node-必须"><a href="#安装node-必须" class="headerlink" title="安装node( 必须 )"></a>安装node( 必须 )</h3><p>作用：用来生成静态页面的 到Node.js<a href="https://nodejs.org/" target="_blank" rel="noopener">官网</a>下载相应平台的最新版本，一路安装即可。</p><h3 id="安装git-必须"><a href="#安装git-必须" class="headerlink" title="安装git( 必须 )"></a>安装git( 必须 )</h3><p>作用：把本地的hexo内容提交到github上去. 安装Xcode就自带有Git</p><h3 id="申请github-必须"><a href="#申请github-必须" class="headerlink" title="申请github( 必须 )"></a>申请github( 必须 )</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。 <a href="https://github.com/" target="_blank" rel="noopener">github</a>账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。</p><h3 id="正式安装HEXO"><a href="#正式安装HEXO" class="headerlink" title="正式安装HEXO"></a>正式安装HEXO</h3><p>Node和Git都安装好后，可执行如下命令安装hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo</span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>继续再Blog目录下执行如下命令，生成静态页面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate (hexo g)</span><br></pre></td></tr></table></figure><h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>启动本地服务，进行文章预览调试，命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;h3 id=&quot;安装node-必须&quot;&gt;&lt;a href=&quot;#安装node-必须&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="blog" scheme="https://weiTimes.github.io/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://weiTimes.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac上设置MySQL默认编码为UTF-8</title>
    <link href="https://weiTimes.github.io/2017/03/23/abc/"/>
    <id>https://weiTimes.github.io/2017/03/23/abc/</id>
    <published>2017-03-23T10:44:29.000Z</published>
    <updated>2017-05-12T09:21:37.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>登录mysql终端，然后输入下面内容，查看该数据库连接使用的字符集的情况</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;%char%&apos;;</span><br></pre></td></tr></table></figure><ol><li>进入到 /usr/local/mysql/support-files 目录，可以看到里面有个文件: my-default.cnf</li><li>将其复制到桌面上，改名为 my.cnf. 用你喜欢的编辑器将内容替换为:</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"># Example MySQL config file for small systems.</span><br><span class="line">#</span><br><span class="line"># This is for a system with little memory (&lt;= 64M) where MySQL is only used</span><br><span class="line"># from time to time and it&apos;s important that the mysqld daemon</span><br><span class="line"># doesn&apos;t use much resources.</span><br><span class="line">#</span><br><span class="line"># MySQL programs look for option files in a set of</span><br><span class="line"># locations which depend on the deployment platform.</span><br><span class="line"># You can copy this option file to one of those</span><br><span class="line"># locations. For information about these locations, see:</span><br><span class="line"># http://dev.mysql.com/doc/mysql/en/option-files.html</span><br><span class="line">#</span><br><span class="line"># In this file, you can use all long options that a program supports.</span><br><span class="line"># If you want to know which options a program supports, run the program</span><br><span class="line"># with the &quot;--help&quot; option.</span><br><span class="line"></span><br><span class="line"># The following options will be passed to all MySQL clients</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">#password   = your_password</span><br><span class="line">port        = 3306</span><br><span class="line">socket      = /tmp/mysql.sock</span><br><span class="line"></span><br><span class="line"># Here follows entries for some specific programs</span><br><span class="line"></span><br><span class="line"># The MySQL server</span><br><span class="line">[mysqld]</span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">port        = 3306</span><br><span class="line">socket      = /tmp/mysql.sock</span><br><span class="line">skip-external-locking</span><br><span class="line">key_buffer_size = 16K</span><br><span class="line">max_allowed_packet = 1M</span><br><span class="line">table_open_cache = 4</span><br><span class="line">sort_buffer_size = 64K</span><br><span class="line">read_buffer_size = 256K</span><br><span class="line">read_rnd_buffer_size = 256K</span><br><span class="line">net_buffer_length = 2K</span><br><span class="line">thread_stack = 128K</span><br><span class="line"></span><br><span class="line"># Don&apos;t listen on a TCP/IP port at all. This can be a security enhancement,</span><br><span class="line"># if all processes that need to connect to mysqld run on the same host.</span><br><span class="line"># All interaction with mysqld must be made via Unix sockets or named pipes.</span><br><span class="line"># Note that using this option without enabling named pipes on Windows</span><br><span class="line"># (using the &quot;enable-named-pipe&quot; option) will render mysqld useless!</span><br><span class="line">#</span><br><span class="line">#skip-networking</span><br><span class="line">server-id   = 1</span><br><span class="line"></span><br><span class="line"># Uncomment the following if you want to log updates</span><br><span class="line">#log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"># binary logging format - mixed recommended</span><br><span class="line">#binlog_format=mixed</span><br><span class="line"></span><br><span class="line"># Causes updates to non-transactional engines using statement format to be</span><br><span class="line"># written directly to binary log. Before using this option make sure that</span><br><span class="line"># there are no dependencies between transactional and non-transactional</span><br><span class="line"># tables such as in the statement INSERT INTO t_myisam SELECT * FROM</span><br><span class="line"># t_innodb; otherwise, slaves may diverge from the master.</span><br><span class="line">#binlog_direct_non_transactional_updates=TRUE</span><br><span class="line"></span><br><span class="line"># Uncomment the following if you are using InnoDB tables</span><br><span class="line">#innodb_data_home_dir = /usr/local/mysql/data</span><br><span class="line">#innodb_data_file_path = ibdata1:10M:autoextend</span><br><span class="line">#innodb_log_group_home_dir = /usr/local/mysql/data</span><br><span class="line"># You can set .._buffer_pool_size up to 50 - 80 %</span><br><span class="line"># of RAM but beware of setting memory usage too high</span><br><span class="line">#innodb_buffer_pool_size = 16M</span><br><span class="line">#innodb_additional_mem_pool_size = 2M</span><br><span class="line"># Set .._log_file_size to 25 % of buffer pool size</span><br><span class="line">#innodb_log_file_size = 5M</span><br><span class="line">#innodb_log_buffer_size = 8M</span><br><span class="line">#innodb_flush_log_at_trx_commit = 1</span><br><span class="line">#innodb_lock_wait_timeout = 50</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line">quick</span><br><span class="line">max_allowed_packet = 16M</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line">no-auto-rehash</span><br><span class="line"># Remove the next comment character if you are not familiar with SQL</span><br><span class="line">#safe-updates</span><br><span class="line"></span><br><span class="line">[myisamchk]</span><br><span class="line">key_buffer_size = 8M</span><br><span class="line">sort_buffer_size = 8M</span><br><span class="line"></span><br><span class="line">[mysqlhotcopy]</span><br><span class="line">interactive-timeout</span><br></pre></td></tr></table></figure><ol><li>将修改后的文件 my.cnf 复制到 /etc 目录下</li><li>重启mysql</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;登录mysql终端，然后输入下面内容，查看该数据库连接使用的字符集的情况&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;lin
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="https://weiTimes.github.io/tags/Mac/"/>
    
      <category term="MySQL" scheme="https://weiTimes.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在Macbook Pro配置Apache + PHP + MySQL开发环境以及MySql的简单使用</title>
    <link href="https://weiTimes.github.io/2017/03/12/abc/"/>
    <id>https://weiTimes.github.io/2017/03/12/abc/</id>
    <published>2017-03-12T08:17:38.000Z</published>
    <updated>2017-05-15T02:47:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h2><ol><li>Mac OS自带Apache, 只需要启动Apache就可以了</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl start</span><br></pre></td></tr></table></figure><p>介绍另外几个命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apachectl restart //重启Apache服务</span><br><span class="line">sudo apachectl stop //停止Apache服务</span><br><span class="line">httpd -v //查看Apache版本</span><br></pre></td></tr></table></figure><ol><li>打开浏览器，在地址栏输入localhost, 出现It Works, 就说明已经成功启动</li></ol><p><img src="https://d3dr1ze7164817.cloudfront.net/items/0Z2x0c3O020X2t1e1D2T/Image%202017-03-12%20at%206.07.37%20%E4%B8%8B%E5%8D%88.png?X-CloudApp-Visitor-Id=47b8b2f14d7cdbb2f690679600100122&amp;v=5a0a2a76" alt=""></p><ol><li>进入Apache的网站服务器根目录</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/WebServer/Documents</span><br></pre></td></tr></table></figure><ol><li>Mac OS 同样自带PHP，只需要在Apache的配置文件中添加Apache对PHP的支持就好了</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/apache2/httpd.conf //打开文件</span><br><span class="line"></span><br><span class="line">#LoadModule php5_module libexec/apache2/libphp5.so //去掉注释(前面的 # 号)</span><br></pre></td></tr></table></figure><ol><li>重启Apache服务器</li><li>在/Library/WebServer/Documents下新建php文件，例如test.php</li><li>在浏览器中输入 localhost/test.php, 如果出现预期的结果，恭喜你！</li></ol><h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul><li>启动MySQL的安全模式，可以免登录名和密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysqld --skip-grant-tables</span><br></pre></td></tr></table></figure><ul><li>使用root用户[免密码]登录MySQL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line"></span><br><span class="line">输入密码时直接回车</span><br></pre></td></tr></table></figure><ul><li>解决MAC下PHP连接MYSQL错误Warning: mysql_connect(): No such file or directory in conn.php</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /var/mysql</span><br><span class="line">sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;启动Apache&quot;&gt;&lt;a href=&quot;#启动Apache&quot; class=&quot;headerlink&quot; title=&quot;启动Apache&quot;&gt;&lt;/a&gt;启动Apache&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Mac OS自带Apache, 只需要启动Apache就可以了&lt;/li&gt;
&lt;/o
      
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://weiTimes.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
