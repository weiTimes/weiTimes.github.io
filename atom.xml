<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ye Wei&#39;s blog</title>
  <subtitle>所见、所感、所想</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://weiTimes.github.io/"/>
  <updated>2017-05-17T09:49:04.000Z</updated>
  <id>https://weiTimes.github.io/</id>
  
  <author>
    <name>Ye Wei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>在React Native中用WebView打开非HTTPS的的站点</title>
    <link href="https://weiTimes.github.io/2017/05/17/%E5%9C%A8React%20Native%E4%B8%AD%E7%94%A8WebView%E6%89%93%E5%BC%80%E9%9D%9EHTTPS%E7%9A%84%E7%9A%84%E7%AB%99%E7%82%B9/"/>
    <id>https://weiTimes.github.io/2017/05/17/在React Native中用WebView打开非HTTPS的的站点/</id>
    <published>2017-05-17T08:30:39.000Z</published>
    <updated>2017-05-17T09:49:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在React-Native中用WebView打开非HTTPS的的站点"><a href="#在React-Native中用WebView打开非HTTPS的的站点" class="headerlink" title="在React Native中用WebView打开非HTTPS的的站点"></a>在React Native中用WebView打开非HTTPS的的站点</h2><blockquote>
<p>在React Native应用中使用WebView可以复用已经写好的web页面。</p>
</blockquote>
<p><em>在如果我们的应用在IOS9或者更高的版本中使用WebView尝试连接任何的HTTP服务，将会请求失败，也就不能成功地载入web页面，因为HTTP服务不支持最新的SSL技术</em></p>
<p><strong>让我们看一下这个以下操作。这里我们尝试在WebView中访问HTTP的站点</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;WebView</div><div class="line"> contentInset=&#123;&#123; <span class="attr">top</span>: <span class="number">-50</span> &#125;&#125;</div><div class="line">                        startInLoadingState=&#123;<span class="literal">true</span>&#125;</div><div class="line">                        source=&#123;&#123; <span class="attr">uri</span>: 			<span class="string">'http://movie.douban.com/subject/25862357/'</span> &#125;&#125;</div><div class="line">                        <span class="comment">//source=&#123;&#123; uri: this.props.url &#125;&#125;</span></div><div class="line">                        style=&#123;styles.webView&#125;</div><div class="line">                    /&gt;</div></pre></td></tr></table></figure>
<p><strong>在IOS9.0或者更高的环境下，在iPhone模拟器中运行应用，将会出现错误信息</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Error Loading Page</div><div class="line">Domain: NSURLErrorDomain</div><div class="line">Error Code: -1022</div><div class="line">Description: The resource could not be loaded because</div><div class="line">the App Transport Security policy requires the use of a</div><div class="line">secure connection</div></pre></td></tr></table></figure>
<p>理想情况下，这个站点会尝试去连接HTTPS服务。然而，该站点HTTPS服务可能没有被启用或者不支持。</p>
<p>例如，我们在开发app的过程中，可能会想要去连接HTTP的服务。</p>
<h3 id="使用Xcode-将使用的站点服务加入白名单"><a href="#使用Xcode-将使用的站点服务加入白名单" class="headerlink" title="使用Xcode-将使用的站点服务加入白名单"></a>使用Xcode-将使用的站点服务加入白名单</h3><p><strong>为了在WebView中访问HTTP站点，我们需要在Xcode中打开项目，然后打开 <code>Info.plist</code> file</strong></p>
<p>在打开的列表中，我们可以找到<code>App Transport Security Settings</code></p>
<p>当我们展开找到的这一项时，可以看到在<code>Exception Domains</code>中的<code>localhost</code>，在<code>localhost</code>的展开项中有<code>NSTemporaryExceptionAllowsInsecureHTTPLoads</code>，而且它的value值是<code>true</code></p>
<p>因为有了以上设置，当我们连接<code>localhost</code>的服务时，app可以成功运行，即使访问的站点服务支持的类型是HTTP而不是HTTPS.</p>
<p>所以为了能够成功访问非HTTPS的站点，我们需要将访问站点的URL添加到白名单。</p>
<ol>
<li>鼠标移到<code>Exception Domains</code>上，我们可以看到 在右边栏的<code>+</code> </li>
<li>点击添加我们的domain，并且设置它的类型为<code>dictionary</code></li>
<li>现在点击我们刚才添加的domain,然后添加一项key值为<code>NSTemporaryExceptionAllowsInsecureHTTPLoads</code>,类型为<code>Boolean</code>,value值为<code>YES</code>,和之前我们看到的localhost下的设置项是一样的</li>
<li>在终端运行<code>react-native run-ios</code>，我们的应用将会被重新加载，如果没有成功，在运行应用之前先使用xcode<code>clean build</code></li>
</ol>
<h3 id="使用Xcode-将所有站点服务加入白名单"><a href="#使用Xcode-将所有站点服务加入白名单" class="headerlink" title="使用Xcode-将所有站点服务加入白名单"></a>使用Xcode-将所有站点服务加入白名单</h3><p>在实际开发过程中一个个地将站点加入白名单会显得有点麻烦，这时候我们可以将所有的域名都加入白名单。</p>
<p>为了允许所有非HTTPS的站点服务，先删除Xcode中的info.plist里面的<code>Exception Domains</code>，然后添加一个新的key值<code>Allow Arbitrary Loads</code>,value值为<code>true</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果使用第一种方法，即将特定的站点服务加入白名单不见效果，可以使用第二种方法，将所有站点服务都加入白名单，亲测有效哦。</p>
<h3 id=""><a href="#" class="headerlink" title=" "></a> </h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在React-Native中用WebView打开非HTTPS的的站点&quot;&gt;&lt;a href=&quot;#在React-Native中用WebView打开非HTTPS的的站点&quot; class=&quot;headerlink&quot; title=&quot;在React Native中用WebView打开
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://weiTimes.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>React Native问题集锦及解决方案</title>
    <link href="https://weiTimes.github.io/2017/05/16/React%20Native%E9%97%AE%E9%A2%98%E9%9B%86%E9%94%A6%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://weiTimes.github.io/2017/05/16/React Native问题集锦及解决方案/</id>
    <published>2017-05-16T03:55:50.000Z</published>
    <updated>2017-05-17T08:29:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="React-Native问题集锦及解决方案"><a href="#React-Native问题集锦及解决方案" class="headerlink" title="React Native问题集锦及解决方案"></a>React Native问题集锦及解决方案</h2><blockquote>
<p>在React Native的实际开发过程中，会遇到各种各样的问题，有时候花了一段时间去解决完一个问题之后，过了很久可能会又遇到了，由于当时没有记录与总结，所以很可能忘了，然后只能继续去踩坑了，虽然踩坑的速度要比之前快些，但总是费事，所以我将我遇到的问题作一个记录，一个是方便自己查看，另一个希望给有遇到过相同或者相似问题的童鞋一点帮助</p>
</blockquote>
<p><strong>TextInput获得焦点时，模拟器不出现键盘</strong></p>
<p><em>需要勾选Hardware -&gt; Keyboard -&gt; Toggle Software keyboard</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;React-Native问题集锦及解决方案&quot;&gt;&lt;a href=&quot;#React-Native问题集锦及解决方案&quot; class=&quot;headerlink&quot; title=&quot;React Native问题集锦及解决方案&quot;&gt;&lt;/a&gt;React Native问题集锦及解决方案&lt;/
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://weiTimes.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>如何初始化本地git项目，并将其添加到远程仓库</title>
    <link href="https://weiTimes.github.io/2017/05/16/%E5%A6%82%E4%BD%95%E5%88%9D%E5%A7%8B%E5%8C%96%E6%9C%AC%E5%9C%B0git%E9%A1%B9%E7%9B%AE%EF%BC%8C%E5%B9%B6%E5%B0%86%E5%85%B6%E6%B7%BB%E5%8A%A0%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    <id>https://weiTimes.github.io/2017/05/16/如何初始化本地git项目，并将其添加到远程仓库/</id>
    <published>2017-05-16T02:30:36.000Z</published>
    <updated>2017-05-16T02:33:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何初始化本地git项目，并将其添加到远程仓库"><a href="#如何初始化本地git项目，并将其添加到远程仓库" class="headerlink" title="如何初始化本地git项目，并将其添加到远程仓库"></a>如何初始化本地git项目，并将其添加到远程仓库</h2><blockquote>
<p>一开始不会使用git同步远程仓库时候，我的做法是先克隆远程仓库，然后将需要上传的代码拷贝进去，接着是commit, push的常规流程。这在实际开发过程中很不友好，于是我就记录一下一个友好的操作步骤</p>
</blockquote>
<p><em>初始化本地仓库</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init</div></pre></td></tr></table></figure>
<p><em>添加项目描述</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add README.md</div></pre></td></tr></table></figure>
<p><em>提交本地代码到本地仓库</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;first commit&quot;</div></pre></td></tr></table></figure>
<p><em>将本地仓库关联到远程仓库, 其中仓库地址是你新创建的仓库地址</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/weiTimes/ReactNativeDayAndDay.git</div></pre></td></tr></table></figure>
<p><em>将本地仓库的代码更新到远程仓库</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p>刷新新创建的远程仓库的页面地址，可以看到刚才提交上来的文件，如果发现只有README.md, 需要回到项目根目录，进行常规的<code>git commit …</code> 、<code>git push ...</code>等操作。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;如何初始化本地git项目，并将其添加到远程仓库&quot;&gt;&lt;a href=&quot;#如何初始化本地git项目，并将其添加到远程仓库&quot; class=&quot;headerlink&quot; title=&quot;如何初始化本地git项目，并将其添加到远程仓库&quot;&gt;&lt;/a&gt;如何初始化本地git项目，并将其添
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="https://weiTimes.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>react-native 版本升级与降级</title>
    <link href="https://weiTimes.github.io/2017/05/15/react-native%20%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E4%B8%8E%E9%99%8D%E7%BA%A7/"/>
    <id>https://weiTimes.github.io/2017/05/15/react-native 版本升级与降级/</id>
    <published>2017-05-15T09:27:30.000Z</published>
    <updated>2017-05-15T13:31:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="react-native-版本升级与降级"><a href="#react-native-版本升级与降级" class="headerlink" title="react-native 版本升级与降级"></a>react-native 版本升级与降级</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在React Native For Android刚刚开源才不久，现在整体功能还不健全完善以及开发中的坑(Bug)还是比较多的 ，以至于到现在还没有正式版本。项目人员正在加紧开发维护，修复Bug，所以现在React Native项目的版本更新速度还是相对来讲是比较快的。在如此现状之下，我们就要及时关注项目官网了，要将React Native往新版本进行更新，这样我们可以去使用更多的APIs,视图Views,以及开发者工具以及其他一些好用的东西。</p>
<p>我们大家都知道一个React Native项目使用Android项目,iOS项目和JavaScript项目三部分进行组成的，而且三者都关联打包在npm包内的，所以该项目版本进行更新是比较繁琐的。下面我来给大家讲解一下React Native项目的升级步骤。</p>
<h3 id="更换React-Native版本"><a href="#更换React-Native版本" class="headerlink" title="更换React Native版本"></a>更换React Native版本</h3><p><em>查看本地React Native 版本</em></p>
<ul>
<li>首先我们需要查看本地的React Native的版本，命令行输入如下命令:</li>
</ul>
<figure class="highlight powershell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native --version</div></pre></td></tr></table></figure>
<ul>
<li>进入创建的React Native主目录，然后执行 <code>react-native –version</code>就可以看到react-native-cli和react-native的版本号</li>
</ul>
<p><em>查看npm包管理的React Native 版本</em></p>
<ul>
<li>通过命令行查看React Native版本</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm info react-native</div></pre></td></tr></table></figure>
<p><em>更换版本</em></p>
<p>打开项目中的package.json文件，找到dependencies字段，把react-native的版本修改为想要更换的版本</p>
<p><em>切换到项目主目录，执行</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p><em>如安装成功，查看当前版本</em></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native --version</div></pre></td></tr></table></figure>
<h3 id="更新项目templates"><a href="#更新项目templates" class="headerlink" title="更新项目templates"></a>更新项目templates</h3><p>版本不同，构建的项目模板也会发生变化，所以在更新了React Native版本之后，也要及时更新项目模板</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native upgrade</div></pre></td></tr></table></figure>
<p><em>在更新templates的过程中，会进行文件修改检查，选择覆盖还是保留原文件，需要根据实际情况选择是否覆盖，其中有三点原则</em></p>
<ul>
<li>如果是新添加的文件，会进行直接创建</li>
<li>如果更新文件与原文件相同，直接忽略跳过</li>
<li>如果更新文件和当前项目文件不同，有冲突情况，会询问开发者选择覆盖还是保留原文件，需要看实际情况</li>
</ul>
<p>到这里就完成了版本的更换了，在项目根目录运行<code>react-native run-ios</code>或<code>react-native run-android</code>看看有没有问题吧！<br>另外，在初始化React Native的项目时，如需要指定某个版本，可以输入以下命令,其中–version配置的是版本号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">react-native init HotCodeGithub --verbose --version 0.40.0</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;react-native-版本升级与降级&quot;&gt;&lt;a href=&quot;#react-native-版本升级与降级&quot; class=&quot;headerlink&quot; title=&quot;react-native 版本升级与降级&quot;&gt;&lt;/a&gt;react-native 版本升级与降级&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="https://weiTimes.github.io/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>MAC常用命令</title>
    <link href="https://weiTimes.github.io/2017/05/15/MA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://weiTimes.github.io/2017/05/15/MA常用命令/</id>
    <published>2017-05-15T03:00:53.000Z</published>
    <updated>2017-05-15T03:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="显示系统隐藏文件"><a href="#显示系统隐藏文件" class="headerlink" title="显示系统隐藏文件"></a>显示系统隐藏文件</h2><h3 id="运行下面命令"><a href="#运行下面命令" class="headerlink" title="运行下面命令"></a>运行下面命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool true  此命令显示隐藏文件</div><div class="line">defaults write com.apple.finder AppleShowAllFiles -bool false 此命令关闭显示隐藏</div></pre></td></tr></table></figure>
<h3 id="重新加载Finder-command-option-esc-选中Finder-即可重新启动"><a href="#重新加载Finder-command-option-esc-选中Finder-即可重新启动" class="headerlink" title="重新加载Finder: command + option + esc, 选中Finder, 即可重新启动"></a>重新加载Finder: command + option + esc, 选中Finder, 即可重新启动</h3>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;显示系统隐藏文件&quot;&gt;&lt;a href=&quot;#显示系统隐藏文件&quot; class=&quot;headerlink&quot; title=&quot;显示系统隐藏文件&quot;&gt;&lt;/a&gt;显示系统隐藏文件&lt;/h2&gt;&lt;h3 id=&quot;运行下面命令&quot;&gt;&lt;a href=&quot;#运行下面命令&quot; class=&quot;headerli
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="https://weiTimes.github.io/tags/Mac/"/>
    
      <category term="命令行" scheme="https://weiTimes.github.io/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL忘记密码后重置密码( Mac )</title>
    <link href="https://weiTimes.github.io/2017/05/15/abc/"/>
    <id>https://weiTimes.github.io/2017/05/15/abc/</id>
    <published>2017-05-15T02:48:41.000Z</published>
    <updated>2017-05-15T02:59:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>安装好MySQL以后，系统给了个默认的的密码，当时是第一次在Mac上安装，所以忽略了，后来登录MySQL的时候需要用到密码，但不知道密码，所以得修改这个密码了，然后就走上了不归路。</p>
</blockquote>
<p>   这个过程是心酸的，网上的资料多如狗，关键是各有各的错法，尝试了半天没一个对的，在即将打破心理防线，要去翻MySQL文档的时候，成功了有没有。没有一个文章告诉我完整的答案，我是参考了好几个攻略，闭门造出来的车。给自己点赞。不多说了，一步一步跟我</p>
<ul>
<li>走关闭MySQL服务器</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo /usr/local/mysql/support-files/mysql.server stop</div></pre></td></tr></table></figure>
<p>或者在偏好设置里点击MySQL然后将其关闭</p>
<ul>
<li>进入MySQL的二进制命令目录下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/mysql/bin</div></pre></td></tr></table></figure>
<ul>
<li>获取MySQL操作权限</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo su</div></pre></td></tr></table></figure>
<ul>
<li><p>重启MySQL服务器</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mysqld_safe --skip-grant-tables</div></pre></td></tr></table></figure>
</li>
<li><p>重开个终端</p>
</li>
</ul>
<hr>
<ul>
<li>为了在终端可以使用MySQL的命令，需要配置一下，运行下面两条命令</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alias mysql=/usr/local/mysql/bin/mysql</div><div class="line">alias mysqladmin=/usr/local/mysql/bin/mysqladminx</div></pre></td></tr></table></figure>
<p>使用这种方法进行配置，一旦终端关闭了，就又得重新配置了，最好的方法是将MySQL的bin目录加入系统PATH，我用的终端是zsh，所以讲命令配置在.zshrc，如果是其他终端，修改的是相应的文件( 例如：bash -&gt; ./.bashrc )</p>
<p>打开.zshrc, 添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/usr/local/mysql/bin</div></pre></td></tr></table></figure></p>
<p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ./.zshrc</div></pre></td></tr></table></figure></p>
<p>输入mysql 进入mysql命令模式</p>
<p>输入use mysql 进入mysql数据库</p>
<p>输入flush privileges 获取修改密码的权限</p>
<p>输入set password for ‘root’@’localhost’=password(‘新密码’) 修改密码</p>
<p>恭喜你，密码修改成功</p>
<p>使用新密码登录</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure>
<p>回车后输入新密码<br><img src="https://d3dr1ze7164817.cloudfront.net/items/0U1e0U1E0K2Z2c2i3103/Image%202017-03-12%20at%203.31.50%20%E4%B8%8B%E5%8D%88.png?X-CloudApp-Visitor-Id=47b8b2f14d7cdbb2f690679600100122&amp;v=8fe78e62" alt=""></p>
<p>出现上面这个就说明成功登录MySQL</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;安装好MySQL以后，系统给了个默认的的密码，当时是第一次在Mac上安装，所以忽略了，后来登录MySQL的时候需要用到密码，但不知道密码，所以得修改这个密码了，然后就走上了不归路。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;   这个过程是心酸的，
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://weiTimes.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Mac 生成 ssh-key</title>
    <link href="https://weiTimes.github.io/2017/04/13/abc/"/>
    <id>https://weiTimes.github.io/2017/04/13/abc/</id>
    <published>2017-04-13T14:20:26.000Z</published>
    <updated>2017-04-13T14:28:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>用Git下载代码得步骤<br>1.首先需要创建公钥，在命令行中输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;ben@xxx.com&quot;</div></pre></td></tr></table></figure>
<p>然后输入路径，密码之类的，如果不输入，工程就会保存到根目录下面，密码也为空。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/.ssh/id_rsa是私钥，~/.ssh/id_rsa.pub是公钥</div></pre></td></tr></table></figure>
<p>2.接着打开公钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>这里会得到一段很长的编码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCuYZIchz3THIcc/wH0ZB5WZYqe2iBVUNqSzfrgxBvJCZkFHWiUZhA/4omNud/27PVT/FADV9qSvrX7ifP05Cbl6mhE4uJjxOQRNoPdQQcsTEFh5vDvOeiJOT1CoFb9WLGg49Xml4yJmFJqv/Kz5hCe7LEWRYJH6tmaVG0qi9nwAZmjfTQpSWu07eAKB9wAbK6stCdnd5JvMq7IsNNylbwDlXf0RQA4RpppO+14oNBqivhi5ftBPjP15+aWKpnXUxkGMVAefKTvwsyw1T0H2sj+ILVFM4d5xpxu3jPHebqh363OwPPLMsoUy9VhQ3YDtMxt4vyOxvpJ9ekMGlDn/9ut linwenbang@yolanda.hk</div></pre></td></tr></table></figure>
<p>然后在进入GitLab或者Gitblit的个人中心，选择ssh key的配置，将新生成的ssh-key复制进去即可，配置完成之后即可克隆你想要克隆的项目了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用Git下载代码得步骤&lt;br&gt;1.首先需要创建公钥，在命令行中输入：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="https://weiTimes.github.io/tags/Mac/"/>
    
      <category term="Git" scheme="https://weiTimes.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>前端学习路径</title>
    <link href="https://weiTimes.github.io/2017/04/05/abc/"/>
    <id>https://weiTimes.github.io/2017/04/05/abc/</id>
    <published>2017-04-05T13:54:30.000Z</published>
    <updated>2017-05-15T03:08:03.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习路径"><a href="#学习路径" class="headerlink" title="学习路径"></a>学习路径</h2><h3 id="视频学习"><a href="#视频学习" class="headerlink" title="视频学习"></a>视频学习</h3><ul>
<li>妙味教程</li>
<li>慕课网</li>
<li>网易云课堂</li>
</ul>
<h3 id="技术社区"><a href="#技术社区" class="headerlink" title="技术社区"></a>技术社区</h3><ul>
<li>掘金  </li>
<li>开发者头条</li>
<li>推酷</li>
</ul>
<h3 id="Github开源项目"><a href="#Github开源项目" class="headerlink" title="Github开源项目"></a>Github开源项目</h3><ul>
<li>Javascript Day30 挑战</li>
<li>FreeCodeCamp</li>
<li>阮一峰</li>
</ul>
<h3 id="精品系列教程"><a href="#精品系列教程" class="headerlink" title="精品系列教程"></a>精品系列教程</h3><ul>
<li><p>从草根到英雄</p>
<p>​</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;学习路径&quot;&gt;&lt;a href=&quot;#学习路径&quot; class=&quot;headerlink&quot; title=&quot;学习路径&quot;&gt;&lt;/a&gt;学习路径&lt;/h2&gt;&lt;h3 id=&quot;视频学习&quot;&gt;&lt;a href=&quot;#视频学习&quot; class=&quot;headerlink&quot; title=&quot;视频学习&quot;&gt;&lt;/a
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Web" scheme="https://weiTimes.github.io/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>HEXO+Github,搭建属于自己的博客</title>
    <link href="https://weiTimes.github.io/2017/04/01/HEXO+Github/"/>
    <id>https://weiTimes.github.io/2017/04/01/HEXO+Github/</id>
    <published>2017-04-01T14:44:23.000Z</published>
    <updated>2017-04-01T15:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="安装node-必须"><a href="#安装node-必须" class="headerlink" title="安装node( 必须 )"></a>安装node( 必须 )</h3><p>作用：用来生成静态页面的 到Node.js<a href="https://nodejs.org/" target="_blank" rel="external">官网</a>下载相应平台的最新版本，一路安装即可。</p>
<h3 id="安装git-必须"><a href="#安装git-必须" class="headerlink" title="安装git( 必须 )"></a>安装git( 必须 )</h3><p>作用：把本地的hexo内容提交到github上去. 安装Xcode就自带有Git</p>
<h3 id="申请github-必须"><a href="#申请github-必须" class="headerlink" title="申请github( 必须 )"></a>申请github( 必须 )</h3><p>作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。 <a href="https://github.com/" target="_blank" rel="external">github</a>账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。</p>
<h3 id="正式安装HEXO"><a href="#正式安装HEXO" class="headerlink" title="正式安装HEXO"></a>正式安装HEXO</h3><p>Node和Git都安装好后，可执行如下命令安装hexo</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install -g hexo</div></pre></td></tr></table></figure>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<h3 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h3><p>继续再Blog目录下执行如下命令，生成静态页面</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate (hexo g)</div></pre></td></tr></table></figure>
<h3 id="本地启动"><a href="#本地启动" class="headerlink" title="本地启动"></a>本地启动</h3><p>启动本地服务，进行文章预览调试，命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;配置环境&quot;&gt;&lt;a href=&quot;#配置环境&quot; class=&quot;headerlink&quot; title=&quot;配置环境&quot;&gt;&lt;/a&gt;配置环境&lt;/h2&gt;&lt;h3 id=&quot;安装node-必须&quot;&gt;&lt;a href=&quot;#安装node-必须&quot; class=&quot;headerlink&quot; title=
    
    </summary>
    
      <category term="blog" scheme="https://weiTimes.github.io/categories/blog/"/>
    
    
      <category term="Hexo" scheme="https://weiTimes.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac上设置MySQL默认编码为UTF-8</title>
    <link href="https://weiTimes.github.io/2017/03/23/abc/"/>
    <id>https://weiTimes.github.io/2017/03/23/abc/</id>
    <published>2017-03-23T10:44:29.000Z</published>
    <updated>2017-05-12T09:21:37.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>登录mysql终端，然后输入下面内容，查看该数据库连接使用的字符集的情况</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show variables like &apos;%char%&apos;;</div></pre></td></tr></table></figure>
<ol>
<li>进入到 /usr/local/mysql/support-files 目录，可以看到里面有个文件: my-default.cnf</li>
<li>将其复制到桌面上，改名为 my.cnf. 用你喜欢的编辑器将内容替换为:</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"># Example MySQL config file for small systems.</div><div class="line">#</div><div class="line"># This is for a system with little memory (&lt;= 64M) where MySQL is only used</div><div class="line"># from time to time and it&apos;s important that the mysqld daemon</div><div class="line"># doesn&apos;t use much resources.</div><div class="line">#</div><div class="line"># MySQL programs look for option files in a set of</div><div class="line"># locations which depend on the deployment platform.</div><div class="line"># You can copy this option file to one of those</div><div class="line"># locations. For information about these locations, see:</div><div class="line"># http://dev.mysql.com/doc/mysql/en/option-files.html</div><div class="line">#</div><div class="line"># In this file, you can use all long options that a program supports.</div><div class="line"># If you want to know which options a program supports, run the program</div><div class="line"># with the &quot;--help&quot; option.</div><div class="line"></div><div class="line"># The following options will be passed to all MySQL clients</div><div class="line">[client]</div><div class="line">default-character-set=utf8</div><div class="line">#password   = your_password</div><div class="line">port        = 3306</div><div class="line">socket      = /tmp/mysql.sock</div><div class="line"></div><div class="line"># Here follows entries for some specific programs</div><div class="line"></div><div class="line"># The MySQL server</div><div class="line">[mysqld]</div><div class="line">default-storage-engine=INNODB</div><div class="line">character-set-server=utf8</div><div class="line">collation-server=utf8_general_ci</div><div class="line">port        = 3306</div><div class="line">socket      = /tmp/mysql.sock</div><div class="line">skip-external-locking</div><div class="line">key_buffer_size = 16K</div><div class="line">max_allowed_packet = 1M</div><div class="line">table_open_cache = 4</div><div class="line">sort_buffer_size = 64K</div><div class="line">read_buffer_size = 256K</div><div class="line">read_rnd_buffer_size = 256K</div><div class="line">net_buffer_length = 2K</div><div class="line">thread_stack = 128K</div><div class="line"></div><div class="line"># Don&apos;t listen on a TCP/IP port at all. This can be a security enhancement,</div><div class="line"># if all processes that need to connect to mysqld run on the same host.</div><div class="line"># All interaction with mysqld must be made via Unix sockets or named pipes.</div><div class="line"># Note that using this option without enabling named pipes on Windows</div><div class="line"># (using the &quot;enable-named-pipe&quot; option) will render mysqld useless!</div><div class="line">#</div><div class="line">#skip-networking</div><div class="line">server-id   = 1</div><div class="line"></div><div class="line"># Uncomment the following if you want to log updates</div><div class="line">#log-bin=mysql-bin</div><div class="line"></div><div class="line"># binary logging format - mixed recommended</div><div class="line">#binlog_format=mixed</div><div class="line"></div><div class="line"># Causes updates to non-transactional engines using statement format to be</div><div class="line"># written directly to binary log. Before using this option make sure that</div><div class="line"># there are no dependencies between transactional and non-transactional</div><div class="line"># tables such as in the statement INSERT INTO t_myisam SELECT * FROM</div><div class="line"># t_innodb; otherwise, slaves may diverge from the master.</div><div class="line">#binlog_direct_non_transactional_updates=TRUE</div><div class="line"></div><div class="line"># Uncomment the following if you are using InnoDB tables</div><div class="line">#innodb_data_home_dir = /usr/local/mysql/data</div><div class="line">#innodb_data_file_path = ibdata1:10M:autoextend</div><div class="line">#innodb_log_group_home_dir = /usr/local/mysql/data</div><div class="line"># You can set .._buffer_pool_size up to 50 - 80 %</div><div class="line"># of RAM but beware of setting memory usage too high</div><div class="line">#innodb_buffer_pool_size = 16M</div><div class="line">#innodb_additional_mem_pool_size = 2M</div><div class="line"># Set .._log_file_size to 25 % of buffer pool size</div><div class="line">#innodb_log_file_size = 5M</div><div class="line">#innodb_log_buffer_size = 8M</div><div class="line">#innodb_flush_log_at_trx_commit = 1</div><div class="line">#innodb_lock_wait_timeout = 50</div><div class="line"></div><div class="line">[mysqldump]</div><div class="line">quick</div><div class="line">max_allowed_packet = 16M</div><div class="line"></div><div class="line">[mysql]</div><div class="line">no-auto-rehash</div><div class="line"># Remove the next comment character if you are not familiar with SQL</div><div class="line">#safe-updates</div><div class="line"></div><div class="line">[myisamchk]</div><div class="line">key_buffer_size = 8M</div><div class="line">sort_buffer_size = 8M</div><div class="line"></div><div class="line">[mysqlhotcopy]</div><div class="line">interactive-timeout</div></pre></td></tr></table></figure>
<ol>
<li>将修改后的文件 my.cnf 复制到 /etc 目录下</li>
<li>重启mysql</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;登录mysql终端，然后输入下面内容，查看该数据库连接使用的字符集的情况&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Mac" scheme="https://weiTimes.github.io/tags/Mac/"/>
    
      <category term="MySQL" scheme="https://weiTimes.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>在Macbook Pro配置Apache + PHP + MySQL开发环境以及MySql的简单使用</title>
    <link href="https://weiTimes.github.io/2017/03/12/abc/"/>
    <id>https://weiTimes.github.io/2017/03/12/abc/</id>
    <published>2017-03-12T08:17:38.000Z</published>
    <updated>2017-05-15T02:47:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="启动Apache"><a href="#启动Apache" class="headerlink" title="启动Apache"></a>启动Apache</h2><ol>
<li>Mac OS自带Apache, 只需要启动Apache就可以了</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apachectl start</div></pre></td></tr></table></figure>
<p>介绍另外几个命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apachectl restart //重启Apache服务</div><div class="line">sudo apachectl stop //停止Apache服务</div><div class="line">httpd -v //查看Apache版本</div></pre></td></tr></table></figure>
<ol>
<li>打开浏览器，在地址栏输入localhost, 出现It Works, 就说明已经成功启动</li>
</ol>
<p><img src="https://d3dr1ze7164817.cloudfront.net/items/0Z2x0c3O020X2t1e1D2T/Image%202017-03-12%20at%206.07.37%20%E4%B8%8B%E5%8D%88.png?X-CloudApp-Visitor-Id=47b8b2f14d7cdbb2f690679600100122&amp;v=5a0a2a76" alt=""></p>
<ol>
<li>进入Apache的网站服务器根目录</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /Library/WebServer/Documents</div></pre></td></tr></table></figure>
<ol>
<li>Mac OS 同样自带PHP，只需要在Apache的配置文件中添加Apache对PHP的支持就好了</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/apache2/httpd.conf //打开文件</div><div class="line"></div><div class="line">#LoadModule php5_module libexec/apache2/libphp5.so //去掉注释(前面的 # 号)</div></pre></td></tr></table></figure>
<ol>
<li>重启Apache服务器</li>
<li>在/Library/WebServer/Documents下新建php文件，例如test.php</li>
<li>在浏览器中输入 localhost/test.php, 如果出现预期的结果，恭喜你！</li>
</ol>
<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><ul>
<li>启动MySQL的安全模式，可以免登录名和密码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mysqld --skip-grant-tables</div></pre></td></tr></table></figure>
<ul>
<li>使用root用户[免密码]登录MySQL</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div><div class="line"></div><div class="line">输入密码时直接回车</div></pre></td></tr></table></figure>
<ul>
<li>解决MAC下PHP连接MYSQL错误Warning: mysql_connect(): No such file or directory in conn.php</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /var/mysql</div><div class="line">sudo ln -s /tmp/mysql.sock /var/mysql/mysql.sock</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;启动Apache&quot;&gt;&lt;a href=&quot;#启动Apache&quot; class=&quot;headerlink&quot; title=&quot;启动Apache&quot;&gt;&lt;/a&gt;启动Apache&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Mac OS自带Apache, 只需要启动Apache就可以了&lt;/li&gt;
&lt;/o
    
    </summary>
    
      <category term="技术" scheme="https://weiTimes.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="MySQL" scheme="https://weiTimes.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
